#!/usr/bin/env python3

import argparse
import os
import sys
import warnings

parser = argparse.ArgumentParser(description=(
    "Evaluate different methods for finding QRS complexes "
    "in single channel ECG signals.")
)

# Positional Arguments

parser.add_argument(
    "input_dir", metavar="INPUT_DIR", type=str,
    help="Directory the ECG recordings reside in."
)
parser.add_argument(
    "output_dir", metavar="OUTPUT_DIR", type=str,
    help="Directory where logfile, report, and plots are to be stored."
)

# Optional Arguments

parser.add_argument(
    "-a", "--save-annotations", action="store_true", dest="save_annotations",
    help="Save detected QRS positions to an MIT annotation file."
)
parser.add_argument(
    "-c", "--cv-method", type=str, dest="cv_method",
    choices=["k2", "k10", "loocv", "defined"], default="loocv",
    help=(
        "The method used for cross-validation (cv). "
        "E.g. k10 is 10-fold cv, loocv is leave-one-out cv. "
        "Default is leave-one-out cv (loocv). "
        "If 'defined' is used, test records have to be specified using the "
        "-t / --test-records flag.")
)
parser.add_argument(
    "-d", "--distance", type=int, default=5,
    help=(
        "Maximum allowed distance between detected and acutal "
        "QRS complex positions. Default is 5 samples.")
)
parser.add_argument(
    "-e", "--epochs", type=int, default=1,
    help="Number of training epochs for neural networks. Default is 1 epoch."
)
parser.add_argument(
    "-g", "--gpus", type=int, default=1,
    help=(
        "Number of GPUs to use. If no GPUs are present, CPU is used. "
        "Default is 1 GPU (or whole CPU if no GPU is present).")
)
parser.add_argument(
    "-m", "--save-model", action="store_true", dest="save_model",
    help="Save models generated by neural network training to a file."
)
parser.add_argument(
    "-p", "--generate-plots", action="store_true", dest="generate_plots",
    help="Generate plot snippets for visual detector assessment."
)
parser.add_argument(
    "-r", "--records", type=str, nargs="+",
    help=(
        "Names of the ECG recording files. "
        "If unset, all signals in directory are used.")
)
parser.add_argument(
    "-s", "--sampto", type=int,
    help=(
        "Specifies how many samples of the record are used. "
        "If unspecifed, the whole record is used.")
)
parser.add_argument(
    "-t", "--test-records", type=str, nargs="+", dest="test_records",
    help=(
        "Specifies which records are used for testing, if and only if "
        "-c / --cv-method is set to 'defined'.")
)
parser.add_argument(
    "-v", "--verbose", action="store_true",
    help="Show additional output for debugging purposes."
)

# Rectify arguments

def all_signals_in(path):
    return list(set([f.split('.')[0] for f in os.listdir(path)]))

def rel_to_abs(rel):
    return None if rel is None else '/'.join([os.getcwd(),rel])

args = parser.parse_args()

args.input_dir = rel_to_abs(args.input_dir)
if args.records is None: args.records = all_signals_in(args.input_dir)

args.output_dir = rel_to_abs(args.output_dir)
if not os.path.exists(args.output_dir): os.makedirs(args.output_dir)

# Verbosity settings

if not args.verbose:
    # disable Tensorflow logging
    os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'
    # disable Python warnings
    if not sys.warnoptions: warnings.simplefilter("ignore")

# Evaluate!

from detectors import (
    GarciaBerdonesDetector, PanTompkinsDetector, SarlijaDetector,
    WfdbGQRSDetector, WfdbXQRSDetector, XiangDetector)
from evaluator import Evaluator

eval = Evaluator(
    input_dir = args.input_dir,
    output_dir = args.output_dir,
    sampto = args.sampto,
    generate_plots = args.generate_plots,
    save_annotations = args.save_annotations,
    save_model = args.save_model,
    actual_detected_distance=args.distance
)

eval.add_detectors(
    WfdbGQRSDetector(),
    WfdbXQRSDetector(),
    PanTompkinsDetector(10),
    GarciaBerdonesDetector(32, 20, epochs=args.epochs, gpus=args.gpus),
    SarlijaDetector(32, 50, 10, epochs=args.epochs, gpus=args.gpus),
    XiangDetector(32, 60, 10, 5, epochs=args.epochs, gpus=args.gpus)
)

eval.add_records(*args.records)

if args.cv_method == "loocv": eval.loocv()
elif args.cv_method == "k2": eval.kfold(k=2)
elif args.cv_method == "k10": eval.kfold(k=10)
elif args.cv_method == 'defined': eval.defined(test_records=args.test_records)